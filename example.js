// Generated by CoffeeScript 1.6.3
(function() {
  var AsyncTableData, CELL_PAGE_SIZE, COL_PAGE_SIZE, LRUCache, makePage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  LRUCache = (function() {
    function LRUCache(size) {
      this.size = size != null ? size : 100;
      this.data = {};
      this.lru_keys = [];
    }

    LRUCache.prototype.has = function(k) {
      return this.data.hasOwnProperty(k);
    };

    LRUCache.prototype.get = function(k) {
      return this.data[k];
    };

    LRUCache.prototype.set = function(k, v) {
      var idx, removeKey;
      idx = this.lru_keys.indexOf(k);
      if (idx >= 0) {
        this.lru_keys.splice(idx, 1);
      }
      this.lru_keys.push(k);
      if (this.lru_keys.length >= this.size) {
        removeKey = this.lru_keys.shift();
        delete this.data[removeKey];
      }
      return this.data[k] = v;
    };

    return LRUCache;

  })();

  CELL_PAGE_SIZE = 256 - 1;

  COL_PAGE_SIZE = 1024 - 1;

  makePage = function(pageName, I, J) {
    this.pageName = pageName;
    this.I = I;
    this.J = J;
    return function(i, j) {
      return this.pageName + ":" + (i - this.I) + "," + (j - this.J);
    };
  };

  AsyncTableData = (function(_super) {
    __extends(AsyncTableData, _super);

    function AsyncTableData() {
      this.pageCache = new LRUCache();
      this.fetchCallbacks = {};
    }

    AsyncTableData.prototype.cellPageKey = function(i, j) {
      return [i - (i & CELL_PAGE_SIZE), j - (j & CELL_PAGE_SIZE)];
    };

    AsyncTableData.prototype.hasCell = function(i, j) {
      var pageName;
      pageName = this.cellPageKey(i, j).join(",");
      return this.pageCache.has(pageName);
    };

    AsyncTableData.prototype.getCell = function(i, j, cb) {
      var I, J, pageName, _ref;
      if (cb == null) {
        cb = (function() {});
      }
      _ref = this.cellPageKey(i, j), I = _ref[0], J = _ref[1];
      pageName = [I, J].join(",");
      if (this.pageCache.has(pageName)) {
        return cb(this.pageCache.get(pageName)(i, j));
      } else if (this.fetchCallbacks[pageName] != null) {
        return this.fetchCallbacks[pageName].push([i, j, cb]);
      } else {
        this.fetchCallbacks[pageName] = [[i, j, cb]];
        return this.fetchCellPage(pageName, I, J);
      }
    };

    AsyncTableData.prototype.fetchCellPage = function(pageName, I, J) {
      var deferred,
        _this = this;
      deferred = function() {
        var cb, i, j, page, _i, _len, _ref, _ref1;
        page = makePage(pageName, I, J);
        _this.pageCache.set(pageName, page);
        _ref = _this.fetchCallbacks[pageName];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], i = _ref1[0], j = _ref1[1], cb = _ref1[2];
          cb(page(i, j));
        }
        return delete _this.fetchCallbacks[pageName];
      };
      return window.setTimeout(deferred, 500);
    };

    AsyncTableData.prototype.hasColumn = function(j) {
      return true;
    };

    AsyncTableData.prototype.getHeader = function(j, cb) {
      if (cb == null) {
        cb = (function() {});
      }
      return cb("col " + j);
    };

    return AsyncTableData;

  })(window.TableData);

  window.AsyncTableData = AsyncTableData;

}).call(this);
