// Generated by CoffeeScript 1.6.3
(function() {
  var CellPainter, ScrollBarProxy, TableData, TableView, binary_search, closest, cumsum, distance, smallest_diff_subsequence,
    __slice = [].slice;

  cumsum = function(arr) {
    var cs, i, s, _i, _ref;
    cs = arr.slice(0);
    cs[0] = 0.0;
    s = 0.0;
    for (i = _i = 0, _ref = arr.length - 1; _i < _ref; i = _i += 1) {
      s += arr[i];
      cs[i + 1] = s;
    }
    return cs;
  };

  TableData = (function() {
    function TableData() {}

    TableData.prototype.hasCell = function(i, j) {
      return false;
    };

    TableData.prototype.hasColumn = function(j) {
      return false;
    };

    TableData.prototype.getCell = function(i, j, cb) {
      var deferred;
      if (cb == null) {
        cb = (function() {});
      }
      deferred = function() {
        return cb(i + "," + j);
      };
      return setTimeout(deferred, 100);
    };

    TableData.prototype.getHeader = function(j, cb) {
      if (cb == null) {
        cb = (function() {});
      }
      return cb("col " + j);
    };

    return TableData;

  })();

  binary_search = function(arr, x) {
    var a, b, m, v;
    if (arr[0] > x) {
      return 0;
    } else {
      a = 0;
      b = arr.length;
      while (a + 2 < b) {
        m = (a + b) / 2 | 0;
        v = arr[m];
        if (v < x) {
          a = m;
        } else if (v > x) {
          b = m;
        } else {
          return m;
        }
      }
      return a;
    }
  };

  distance = function(a1, a2) {
    return Math.abs(a2 - a1);
  };

  closest = function() {
    var d, d_, res, vals, x, x_, _i, _len;
    x = arguments[0], vals = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    d = Infinity;
    res = void 0;
    for (_i = 0, _len = vals.length; _i < _len; _i++) {
      x_ = vals[_i];
      d_ = distance(x, x_);
      if (d_ < d) {
        d = d_;
        res = x_;
      }
    }
    return res;
  };

  CellPainter = (function() {
    function CellPainter() {}

    CellPainter.prototype.setupCell = function(cellDiv) {};

    CellPainter.prototype.setupColumnHeader = function(colHeaderDiv) {};

    CellPainter.prototype.fillColumnHeader = function(colHeaderDiv, data) {
      return colHeaderDiv.textContent = data;
    };

    CellPainter.prototype.fillCell = function(cellDiv, data) {
      return cellDiv.textContent = data;
    };

    CellPainter.prototype.fillColumnHeaderPending = function(cellDiv) {
      return cellDiv.textContent = "NA";
    };

    CellPainter.prototype.fillCellPending = function(cellDiv) {
      return cellDiv.textContent = "NA";
    };

    return CellPainter;

  })();

  smallest_diff_subsequence = function(arr, w) {
    var l, start;
    l = 1;
    start = 0;
    while (start + l < arr.length) {
      if (arr[start + l] - arr[start] > w) {
        start += 1;
      } else {
        l += 1;
      }
    }
    return l;
  };

  ScrollBarProxy = (function() {
    function ScrollBarProxy(container, W, H) {
      var bigContentHorizontal, bigContentVertical, onMouseWheel,
        _this = this;
      this.container = container;
      this.W = W;
      this.H = H;
      this.verticalScrollbar = document.createElement("div");
      this.verticalScrollbar.className += " fattable-v-scrollbar";
      this.horizontalScrollbar = document.createElement("div");
      this.horizontalScrollbar.className += " fattable-h-scrollbar";
      this.container.appendChild(this.verticalScrollbar);
      this.container.appendChild(this.horizontalScrollbar);
      bigContentHorizontal = document.createElement("div");
      bigContentHorizontal.style.height = 1 + "px";
      bigContentHorizontal.style.width = this.W + "px";
      bigContentVertical = document.createElement("div");
      bigContentVertical.style.width = 1 + "px";
      bigContentVertical.style.height = this.H + "px";
      this.horizontalScrollbar.appendChild(bigContentHorizontal);
      this.verticalScrollbar.appendChild(bigContentVertical);
      this.scrollLeft = 0;
      this.scrollTop = 0;
      this.horizontalScrollbar.onscroll = function() {
        _this.scrollLeft = _this.horizontalScrollbar.scrollLeft;
        return _this.onScrollXY(_this.scrollLeft, _this.scrollTop);
      };
      this.verticalScrollbar.onscroll = function() {
        _this.scrollTop = _this.verticalScrollbar.scrollTop;
        return _this.onScrollXY(_this.scrollLeft, _this.scrollTop);
      };
      this.container.addEventListener('mousedown', function(evt) {
        if (evt.button === 1) {
          _this.moving = true;
          _this.moving_dX = _this.scrollLeft + evt.clientX;
          return _this.moving_dY = _this.scrollTop + evt.clientY;
        }
      });
      this.container.addEventListener('mouseup', function() {
        return _this.moving = false;
      });
      this.container.addEventListener('mousemove', function(evt) {
        var newX, newY;
        if (_this.moving) {
          newX = -evt.clientX + _this.moving_dX;
          newY = -evt.clientY + _this.moving_dY;
          return _this.setScrollXY(newX, newY);
        }
      });
      this.container.addEventListener('mouseout', function(evt) {
        if (_this.moving) {
          if ((evt.toElement === null) || (evt.toElement.parentElement.parentElement !== _this.container)) {
            return _this.moving = false;
          }
        }
      });
      onMouseWheel = function(evt) {
        if (evt.type === "mousewheel") {
          return _this.setScrollXY(_this.scrollLeft, _this.scrollTop - evt.wheelDelta);
        }
      };
      if (this.container.addEventListener) {
        this.container.addEventListener("mousewheel", onMouseWheel, false);
        this.container.addEventListener("DOMMouseScroll", onMouseWheel, false);
      } else {
        this.container.attachEvent("onmousewheel", onMouseWheel);
      }
    }

    ScrollBarProxy.prototype.onScrollXY = function(x, y) {};

    ScrollBarProxy.prototype.setScrollXY = function(x, y) {
      var onScrollXY;
      x = Math.max(x, 0);
      x = Math.min(x, this.W);
      y = Math.max(y, 0);
      y = Math.min(y, this.H);
      onScrollXY = this.onScrollXY;
      this.onScrollXY = function() {};
      this.scrollLeft = x;
      this.scrollTop = y;
      this.horizontalScrollbar.scrollLeft = x;
      this.verticalScrollbar.scrollTop = y;
      this.onScrollXY(x, y);
      return this.onScrollXY = onScrollXY;
    };

    return ScrollBarProxy;

  })();

  TableView = (function() {
    TableView.prototype.readRequiredParameter = function(parameters, k, default_value) {
      if (parameters[k] == null) {
        if (default_value === void 0) {
          throw "Expected parameter <" + k + ">";
        } else {
          return this[k] = default_value;
        }
      } else {
        return this[k] = parameters[k];
      }
    };

    function TableView(parameters) {
      var container,
        _this = this;
      container = parameters.container;
      if (container == null) {
        throw "container not specified.";
      }
      if (typeof container === "string") {
        this.container = document.querySelector(container);
      } else if (typeof container === "object") {
        this.container = container;
      } else {
        throw "Container must be a string or a dom element.";
      }
      this.readRequiredParameter(parameters, "painter", new CellPainter());
      this.readRequiredParameter(parameters, "data");
      this.readRequiredParameter(parameters, "nbRows");
      this.readRequiredParameter(parameters, "rowHeight");
      this.readRequiredParameter(parameters, "columnWidths");
      this.readRequiredParameter(parameters, "rowHeight");
      this.readRequiredParameter(parameters, "headerHeight");
      this.nbCols = this.columnWidths.length;
      this.container.className += " fattable";
      this.H = this.rowHeight * this.nbRows;
      this.col_offset = cumsum(this.columnWidths);
      this.W = this.col_offset[this.col_offset.length - 1];
      document.addEventListener("DOMContentLoaded", function() {
        document.removeEventListener("DOMContentLoaded", arguments.callee);
        return _this.setup();
      });
      window.addEventListener("resize", function() {
        return _this.setup();
      });
    }

    TableView.prototype.visible = function(x, y) {
      var i, j;
      j = binary_search(this.col_offset, x);
      i = y / this.rowHeight | 0;
      return [i, j];
    };

    TableView.prototype.setup = function() {
      var c, el, i, j, _i, _j, _k, _ref, _ref1, _ref2,
        _this = this;
      this.columns = {};
      this.cells = {};
      this.container.innerHtml = "";
      this.w = this.container.offsetWidth;
      this.h = this.container.offsetHeight - this.headerHeight;
      this.nbColsVisible = smallest_diff_subsequence(this.col_offset, this.w) + 2;
      this.nb_rows_visible = (this.h / this.rowHeight | 0) + 2;
      this.headerContainer = document.createElement("div");
      this.headerContainer.className += " fattable-header-container";
      this.headerContainer.style.height = this.headerHeight + "px";
      this.headerViewport = document.createElement("div");
      this.headerViewport.className = "fattable-viewport";
      this.headerViewport.style.width = this.W + "px";
      this.headerViewport.style.height = this.headerHeight + "px";
      this.headerContainer.appendChild(this.headerViewport);
      this.bodyContainer = document.createElement("div");
      this.bodyContainer.className = "fattable-body-container";
      this.bodyContainer.style.top = this.headerHeight + "px";
      this.bodyViewport = document.createElement("div");
      this.bodyViewport.className = "fattable-viewport";
      this.bodyViewport.style.width = this.W + "px";
      this.bodyViewport.style.height = this.H + "px";
      for (j = _i = _ref = -this.nbColsVisible; _i < 0; j = _i += 1) {
        for (i = _j = _ref1 = -this.nb_rows_visible; _j < 0; i = _j += 1) {
          el = document.createElement("div");
          this.painter.setupCell(el);
          this.bodyViewport.appendChild(el);
          this.cells[i + "," + j] = el;
        }
      }
      for (c = _k = _ref2 = -this.nbColsVisible; _k < 0; c = _k += 1) {
        el = document.createElement("div");
        this.painter.setupColumnHeader(el);
        this.columns[c] = el;
        this.headerViewport.appendChild(el);
      }
      this.firstVisibleRow = -this.nb_rows_visible;
      this.lastVisibleRow = -this.nbColsVisible;
      this.goTo(0, 0);
      this.container.appendChild(this.bodyContainer);
      this.container.appendChild(this.headerContainer);
      this.bodyContainer.appendChild(this.bodyViewport);
      this.refreshAllContent();
      this.scrollBarProxy = new ScrollBarProxy(this.bodyContainer, this.W, this.H);
      return this.scrollBarProxy.onScrollXY = function(x, y) {
        var _ref3;
        _ref3 = _this.visible(x, y), i = _ref3[0], j = _ref3[1];
        _this.goTo(i, j);
        _this.headerViewport.style.left = -x + "px";
        _this.bodyViewport.style.left = -x + "px";
        _this.bodyViewport.style.top = -y + "px";
        clearTimeout(_this.scrollEndTimer);
        return _this.scrollEndTimer = setTimeout(_this.refreshAllContent.bind(_this), 200);
      };
    };

    TableView.prototype.refreshAllContent = function() {
      var cell, columnHeader, i, j, k, _fn, _i, _ref, _ref1, _results,
        _this = this;
      _fn = function(columnHeader) {
        return _this.data.getHeader(j, function(data) {
          return _this.painter.fillColumnHeader(columnHeader, data);
        });
      };
      _results = [];
      for (j = _i = _ref = this.lastVisibleRow, _ref1 = this.lastVisibleRow + this.nbColsVisible; _i < _ref1; j = _i += 1) {
        columnHeader = this.columns[j];
        _fn(columnHeader);
        _results.push((function() {
          var _j, _ref2, _ref3, _results1,
            _this = this;
          _results1 = [];
          for (i = _j = _ref2 = this.firstVisibleRow, _ref3 = this.firstVisibleRow + this.nb_rows_visible; _j < _ref3; i = _j += 1) {
            k = i + "," + j;
            cell = this.cells[k];
            _results1.push((function(cell) {
              return _this.data.getCell(i, j, function(data) {
                cell.pending = false;
                return _this.painter.fillCell(cell, data);
              });
            })(cell));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    TableView.prototype.goTo = function(i, j) {
      this.headerContainer.style.display = "none";
      this.bodyContainer.style.display = "none";
      this.moveX(j);
      this.moveY(i);
      this.headerContainer.style.display = "";
      return this.bodyContainer.style.display = "";
    };

    TableView.prototype.moveX = function(j) {
      var cell, col_width, col_x, columnHeader, dest_j, dj, i, k, last_i, last_j, offset_j, orig_j, shift_j, _fn, _i, _j, _ref,
        _this = this;
      last_i = this.firstVisibleRow;
      last_j = this.lastVisibleRow;
      shift_j = j - last_j;
      if (shift_j === 0) {
        return;
      }
      dj = Math.min(Math.abs(shift_j), this.nbColsVisible);
      for (offset_j = _i = 0; _i < dj; offset_j = _i += 1) {
        if (shift_j > 0) {
          orig_j = this.lastVisibleRow + offset_j;
          dest_j = j + offset_j + this.nbColsVisible - dj;
        } else {
          orig_j = this.lastVisibleRow + this.nbColsVisible - dj + offset_j;
          dest_j = j + offset_j;
        }
        col_x = this.col_offset[dest_j] + "px";
        col_width = this.columnWidths[dest_j] + "px";
        columnHeader = this.columns[orig_j];
        delete this.columns[orig_j];
        if (this.data.hasColumn(dest_j)) {
          this.data.getHeader(dest_j, function(data) {
            columnHeader.pending = false;
            return _this.painter.fillColumnHeader(columnHeader, data);
          });
        } else if (!columnHeader.pending) {
          columnHeader.pending = true;
          this.painter.fillColumnHeaderPending(columnHeader);
        }
        columnHeader.style.left = col_x;
        columnHeader.style.width = col_width;
        this.columns[dest_j] = columnHeader;
        _fn = function(cell) {
          if (_this.data.hasCell(i, dest_j)) {
            return _this.data.getCell(i, dest_j, function(data) {
              cell.pending = false;
              return _this.painter.fillCell(cell, data);
            });
          } else if (!cell.pending) {
            cell.pending = true;
            return _this.painter.fillCellPending(cell);
          }
        };
        for (i = _j = last_i, _ref = last_i + this.nb_rows_visible; last_i <= _ref ? _j < _ref : _j > _ref; i = last_i <= _ref ? ++_j : --_j) {
          k = i + "," + orig_j;
          cell = this.cells[k];
          delete this.cells[k];
          this.cells[i + "," + dest_j] = cell;
          cell.style.left = col_x;
          cell.style.width = col_width;
          _fn(cell);
        }
      }
      return this.lastVisibleRow = j;
    };

    TableView.prototype.moveY = function(i) {
      var cell, dest_i, di, j, k, last_i, last_j, offset_i, orig_i, row_y, shift_i, _fn, _i, _j, _ref,
        _this = this;
      last_i = this.firstVisibleRow;
      last_j = this.lastVisibleRow;
      shift_i = i - last_i;
      if (shift_i === 0) {
        return;
      }
      di = Math.min(Math.abs(shift_i), this.nb_rows_visible);
      for (offset_i = _i = 0; _i < di; offset_i = _i += 1) {
        if (shift_i > 0) {
          orig_i = last_i + offset_i;
          dest_i = i + offset_i + this.nb_rows_visible - di;
        } else {
          orig_i = last_i + this.nb_rows_visible - di + offset_i;
          dest_i = i + offset_i;
        }
        row_y = dest_i * this.rowHeight + "px";
        _fn = function(cell) {
          if (_this.data.hasCell(dest_i, j)) {
            return _this.data.getCell(dest_i, j, function(data) {
              cell.pending = false;
              return _this.painter.fillCell(cell, data);
            });
          } else if (!cell.pending) {
            cell.pending = true;
            return _this.painter.fillCellPending(cell);
          }
        };
        for (j = _j = last_j, _ref = last_j + this.nbColsVisible; last_j <= _ref ? _j < _ref : _j > _ref; j = last_j <= _ref ? ++_j : --_j) {
          k = orig_i + "," + j;
          cell = this.cells[k];
          delete this.cells[k];
          this.cells[dest_i + "," + j] = cell;
          cell.style.top = row_y;
          _fn(cell);
        }
      }
      return this.firstVisibleRow = i;
    };

    return TableView;

  })();

  window.fattable = function(params) {
    return new TableView(params);
  };

  window.fattable.TableData = TableData;

  window.fattable.TableView = TableView;

  window.fattable.CellPainter = CellPainter;

}).call(this);
