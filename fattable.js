// Generated by CoffeeScript 1.6.2
(function() {
  var TableData, TableView, binary_search, closest, cumsum, distance, min_width_subarray, sum,
    __slice = [].slice;

  sum = function(arr) {
    var s, x, _i, _len;

    s = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      x = arr[_i];
      s += x;
    }
    return s;
  };

  cumsum = function(arr) {
    var cs, i, s, _i, _ref;

    cs = arr.slice(0);
    cs[0] = 0.0;
    s = 0.0;
    for (i = _i = 0, _ref = arr.length - 1; _i < _ref; i = _i += 1) {
      s += arr[i];
      cs[i + 1] = s;
    }
    return cs;
  };

  TableData = (function() {
    function TableData(_nb_rows, _nb_cols) {
      this._nb_rows = _nb_rows;
      this._nb_cols = _nb_cols;
    }

    TableData.prototype.get = function(i, j) {
      return i + "," + j;
    };

    TableData.prototype.header = function(i) {
      return "col " + i;
    };

    TableData.prototype.nb_cols = function() {
      return this._nb_cols;
    };

    TableData.prototype.nb_rows = function() {
      return this._nb_rows;
    };

    return TableData;

  })();

  binary_search = function(arr, x) {
    var a, b, m, v;

    if (arr[0] > x) {
      return 0;
    } else {
      a = 0;
      b = arr.length;
      while (a + 2 < b) {
        m = (a + b) / 2 | 0;
        v = arr[m];
        if (v < x) {
          a = m;
        } else if (v > x) {
          b = m;
        } else {
          return m;
        }
      }
      return a;
    }
  };

  distance = function(a1, a2) {
    return Math.abs(a2 - a1);
  };

  closest = function() {
    var d, d_, res, vals, x, x_, _i, _len;

    x = arguments[0], vals = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    d = Infinity;
    res = void 0;
    for (_i = 0, _len = vals.length; _i < _len; _i++) {
      x_ = vals[_i];
      d_ = distance(x, x_);
      if (d_ < d) {
        d = d_;
        res = x_;
      }
    }
    return res;
  };

  min_width_subarray = function(cumsum, l) {
    var i, s, w, _i, _ref;

    s = Infinity;
    for (i = _i = 0, _ref = cumsum.length - 1 - l; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      w = cumsum[i + l] - cumsum[i];
      if (w < s) {
        s = w;
      }
    }
    return s;
  };

  TableView = (function() {
    function TableView(container, data, layout) {
      var onDomReady,
        _this = this;

      this.data = data;
      this.layout = layout;
      if (typeof container === "string") {
        this.container = document.querySelector(container);
      } else {
        this.container = container;
      }
      this.container.className += " fattable";
      this.nb_cols = this.data.nb_cols();
      this.nb_rows = this.data.nb_rows();
      this.W = sum(this.layout.column_widths);
      this.row_height = this.layout.row_height;
      this.H = this.layout.row_height * this.nb_rows;
      this.col_offset = cumsum(this.layout.column_widths);
      onDomReady = function() {
        document.removeEventListener("DOMContentLoaded", arguments.callee);
        return _this.setup();
      };
      document.addEventListener("DOMContentLoaded", onDomReady);
      window.addEventListener("resize", function() {
        return _this.setup();
      });
    }

    TableView.prototype.compute_nb_columns = function() {
      var M, l, w, _i;

      M = Math.min.apply(null, this.layout.column_widths);
      for (l = _i = M; M <= 1 ? _i < 1 : _i > 1; l = M <= 1 ? ++_i : --_i) {
        w = min_width_subarray(this.col_offset, l);
        if (w < this.w) {
          return l + 1;
        }
      }
    };

    TableView.prototype.visible = function(x, y) {
      var i, j;

      j = binary_search(this.col_offset, x);
      i = y / this.layout.row_height | 0;
      return [i, j];
    };

    TableView.prototype.on_mousedown = function(evt) {
      if (evt.button === 1) {
        this.moving = true;
        this.moving_dX = this.bodyContainer.scrollLeft + evt.x;
        return this.moving_dY = this.bodyContainer.scrollTop + evt.y;
      }
    };

    TableView.prototype.on_mouseup = function(evt) {
      return this.moving = false;
    };

    TableView.prototype.on_mousemove = function(evt) {
      var x, y;

      if (this.moving) {
        x = this.bodyContainer.scrollLeft;
        y = this.bodyContainer.scrollTop;
        this.bodyContainer.scrollLeft = -evt.x + this.moving_dX;
        return this.bodyContainer.scrollTop = -evt.y + this.moving_dY;
      }
    };

    TableView.prototype.on_mouseout = function(evt) {
      if (evt.toElement === null) {
        return this.moving = false;
      }
    };

    TableView.prototype.setup = function() {
      var c, el, i, j, me, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;

      this.pool = [];
      this.headerPool = [];
      this.columns = {};
      this.cells = {};
      this.container.innerHtml = "";
      this.w = this.container.offsetWidth;
      this.h = this.container.offsetHeight - this.layout.header_height;
      this.last_i = 0;
      this.last_j = 0;
      this.nb_cols_visible = this.compute_nb_columns();
      this.nb_rows_visible = (this.h / this.layout.row_height | 0) + 2;
      this.headerContainer = document.createElement("div");
      this.headerContainer.className += " fattable-header-container";
      this.headerContainer.style.height = this.layout.header_height + "px";
      this.headerViewport = document.createElement("div");
      this.headerViewport.className = "fattable-viewport";
      this.headerViewport.style.width = this.W + "px";
      this.headerViewport.style.height = this.layout.header_height + "px";
      this.headerContainer.appendChild(this.headerViewport);
      this.bodyContainer = document.createElement("div");
      this.bodyContainer.className = "fattable-body-container";
      this.bodyContainer.style.top = this.layout.header_height + "px";
      this.bodyContainer.addEventListener('mousedown', this.on_mousedown.bind(this));
      this.bodyContainer.addEventListener('mouseup', this.on_mouseup.bind(this));
      this.bodyContainer.addEventListener('mousemove', this.on_mousemove.bind(this));
      this.bodyContainer.addEventListener('mouseout', this.on_mouseout.bind(this));
      this.viewport = document.createElement("div");
      this.viewport.className = "fattable-viewport";
      this.viewport.style.width = this.W + "px";
      this.viewport.style.height = this.H + "px";
      for (c = _i = 0, _ref = this.nb_cols_visible * this.nb_rows_visible; 0 <= _ref ? _i < _ref : _i > _ref; c = 0 <= _ref ? ++_i : --_i) {
        el = document.createElement("div");
        this.viewport.appendChild(el);
        this.pool.push(el);
      }
      for (c = _j = 0, _ref1 = this.nb_cols_visible; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
        el = document.createElement("div");
        this.headerPool.push(el);
        this.headerViewport.appendChild(el);
      }
      for (j = _k = 0, _ref2 = this.nb_cols_visible; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; j = 0 <= _ref2 ? ++_k : --_k) {
        this.show_column_header(j);
        for (i = _l = 0, _ref3 = this.nb_rows_visible; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
          this.show_cell(i, j);
        }
      }
      this.cur_i = 0;
      this.cur_j = 0;
      this.container.appendChild(this.bodyContainer);
      this.container.appendChild(this.headerContainer);
      this.bodyContainer.appendChild(this.viewport);
      me = this;
      return this.bodyContainer.onscroll = function() {
        var x, y, _ref4;

        x = this.scrollLeft;
        y = this.scrollTop;
        _ref4 = me.visible(x, y), i = _ref4[0], j = _ref4[1];
        me.headerContainer.style.display = "none";
        me.bodyContainer.style.display = "none";
        me.headerViewport.style.left = -x + "px";
        me.move_x(j);
        me.move_y(i);
        me.headerContainer.style.display = "";
        return me.bodyContainer.style.display = "";
      };
    };

    TableView.prototype.show_column_header = function(j) {
      var colEl, data;

      colEl = this.headerPool.pop();
      data = this.data.header(j);
      colEl.textContent = data;
      colEl.style.left = this.col_offset[j] + "px";
      colEl.style.width = this.layout.column_widths[j] + "px";
      return this.columns[j] = colEl;
    };

    TableView.prototype.hide_column_header = function(j) {
      var columnHeader;

      columnHeader = this.columns[j];
      this.headerPool.push(columnHeader);
      return delete this.columns[j];
    };

    TableView.prototype.show_cell = function(i, j) {
      var data, el;

      el = this.pool.pop();
      data = this.data.get(i, j);
      el.textContent = data;
      el.style.left = this.col_offset[j] + "px";
      el.style.top = this.layout.row_height * i + "px";
      el.style.width = this.layout.column_widths[j] + "px";
      return this.cells[i + "," + j] = el;
    };

    TableView.prototype.show_patch = function(i, j, w, h) {
      var col_id, row_id, _i, _ref, _results;

      _results = [];
      for (row_id = _i = i, _ref = i + h; _i < _ref; row_id = _i += 1) {
        _results.push((function() {
          var _j, _ref1, _results1;

          _results1 = [];
          for (col_id = _j = j, _ref1 = j + w; _j < _ref1; col_id = _j += 1) {
            _results1.push(this.show_cell(row_id, col_id));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    TableView.prototype.hide_cell = function(i, j) {
      var cell, k;

      k = i + "," + j;
      cell = this.cells[k];
      this.pool.push(cell);
      return delete cell[k];
    };

    TableView.prototype.hide_patch = function(i, j, w, h) {
      var col_id, row_id, _i, _ref, _results;

      _results = [];
      for (row_id = _i = i, _ref = i + h; _i < _ref; row_id = _i += 1) {
        _results.push((function() {
          var _j, _ref1, _results1;

          _results1 = [];
          for (col_id = _j = j, _ref1 = j + w; _j < _ref1; col_id = _j += 1) {
            _results1.push(this.hide_cell(row_id, col_id));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    TableView.prototype.move_x = function(j) {
      var cell, col_width, col_x, columnHeader, data, dest_j, dj, i, k, last_i, last_j, offset_j, orig_j, shift_j, _i, _j, _ref, _ref1;

      last_i = this.last_i;
      last_j = this.last_j;
      shift_j = j - last_j;
      if (shift_j === 0) {
        return;
      }
      dj = Math.min(Math.abs(shift_j), this.nb_cols_visible);
      for (offset_j = _i = 0; _i < dj; offset_j = _i += 1) {
        if (shift_j > 0) {
          orig_j = this.last_j + offset_j;
          dest_j = j + offset_j + this.nb_cols_visible - dj;
        } else {
          orig_j = this.last_j + this.nb_cols_visible - dj + offset_j;
          dest_j = j + offset_j;
        }
        col_x = this.col_offset[dest_j] + "px";
        col_width = this.layout.column_widths[dest_j] + "px";
        columnHeader = this.columns[orig_j];
        delete this.columns[orig_j];
        columnHeader.textContent = this.data.header(dest_j);
        columnHeader.style.left = col_x;
        columnHeader.style.width = col_width;
        this.columns[dest_j] = columnHeader;
        for (i = _j = _ref = this.last_i, _ref1 = this.last_i + this.nb_rows_visible; _ref <= _ref1 ? _j < _ref1 : _j > _ref1; i = _ref <= _ref1 ? ++_j : --_j) {
          data = this.data.get(i, dest_j);
          k = i + "," + orig_j;
          cell = this.cells[k];
          delete this.cells[k];
          this.cells[i + "," + dest_j] = cell;
          cell.style.left = col_x;
          cell.style.width = col_width;
          cell.textContent = data;
        }
      }
      return this.last_j = j;
    };

    TableView.prototype.move_y = function(i) {
      var cell, data, dest_i, di, j, k, last_i, last_j, offset_i, orig_i, row_y, shift_i, _i, _j, _ref, _ref1;

      last_i = this.last_i;
      last_j = this.last_j;
      shift_i = i - last_i;
      if (shift_i === 0) {
        return;
      }
      di = Math.min(Math.abs(shift_i), this.nb_rows_visible);
      for (offset_i = _i = 0; _i < di; offset_i = _i += 1) {
        if (shift_i > 0) {
          orig_i = this.last_i + offset_i;
          dest_i = i + offset_i + this.nb_rows_visible - di;
        } else {
          orig_i = this.last_i + this.nb_rows_visible - di + offset_i;
          dest_i = i + offset_i;
        }
        row_y = dest_i * this.layout.row_height + "px";
        for (j = _j = _ref = this.last_j, _ref1 = this.last_j + this.nb_cols_visible; _ref <= _ref1 ? _j < _ref1 : _j > _ref1; j = _ref <= _ref1 ? ++_j : --_j) {
          data = this.data.get(dest_i, j);
          k = orig_i + "," + j;
          cell = this.cells[k];
          delete this.cells[k];
          this.cells[dest_i + "," + j] = cell;
          cell.style.top = row_y;
          cell.textContent = data;
        }
      }
      return this.last_i = i;
    };

    TableView.prototype.repaint = function(i, j) {
      var cj, last_i, last_j, mh, mi, nb_rows, _i, _j, _k, _ref;

      last_i = this.last_i;
      last_j = this.last_j;
      if (distance(i, last_i) >= this.nb_rows_visible || distance(j, last_j) >= this.nb_cols_visible) {
        this.hide_patch(last_i, last_j, this.nb_cols_visible, this.nb_rows_visible);
        this.show_patch(i, j, this.nb_cols_visible, this.nb_rows_visible);
        for (cj = _i = 0, _ref = this.nb_cols_visible; _i < _ref; cj = _i += 1) {
          this.hide_column_header(last_j + cj);
          this.show_column_header(j + cj);
        }
      } else {
        if (i > last_i) {
          nb_rows = i - last_i;
          this.hide_patch(last_i, last_j, this.nb_cols_visible, nb_rows);
          this.show_patch(last_i + this.nb_rows_visible, j, this.nb_cols_visible, nb_rows);
          mh = last_i + this.nb_rows_visible - i;
          mi = i;
        } else {
          nb_rows = last_i - i;
          this.hide_patch(i + this.nb_rows_visible, last_j, this.nb_cols_visible, nb_rows);
          this.show_patch(i, j, this.nb_cols_visible, nb_rows);
          mh = i + this.nb_rows_visible - last_i;
          mi = last_i;
        }
        if (j > last_j) {
          this.hide_patch(mi, last_j, j - last_j, mh);
          this.show_patch(mi, last_j + this.nb_cols_visible, j - last_j, mh);
          for (cj = _j = last_j; _j < j; cj = _j += 1) {
            this.hide_column_header(cj);
            this.show_column_header(cj + this.nb_cols_visible);
          }
        } else {
          this.hide_patch(mi, j + this.nb_cols_visible, last_j - j, mh);
          this.show_patch(mi, j, last_j - j, mh);
          for (cj = _k = j; _k < last_j; cj = _k += 1) {
            this.hide_column_header(cj + this.nb_cols_visible);
            this.show_column_header(cj);
          }
        }
      }
      this.last_i = i;
      return this.last_j = j;
    };

    return TableView;

  })();

  window.TableData = TableData;

  window.TableView = TableView;

}).call(this);
